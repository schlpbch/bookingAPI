swagger: '2.0'

## API Information
info:
  version: '0.0.5'
  title: "Simple öV booking API"
  description: "A simple API to book öV tickets in Switzerland."
  contact:
    name: Team SVS Vertrieb
    email: andreas.schlapbach@sbb.ch
    url: http://api.sbb.ch/booking
  license:
    name: SBB
    url: https://data.sbb.ch/page/licence/
#host: api.sbb.ch
#host: localhost:8080
basePath: /booking
schemes:
  - http # Nur am Anfang
  - https
consumes:
  - application/json
produces:
  - application/json
  - application/pdf

## Security
#securityDefinitions:
#  oauth:
#    type: oauth2
#    flow: implicit
#    authorizationUrl: https://xyz #To clarify
#    scopes:
#      basic: |
#       to read any and all data related to the B2P API
#security:
#  - oauth:
#    - basic

## Paths
paths:

  /ping/{message}:
    x-swagger-router-controller: ping
    get:
      description: "Returns the message sent."
      operationId: getPing
      parameters:
        - name: message
          in: path
          description: "The message sent."
          required: true
          type: string
          default: 'hello'
      responses:
        200:
          description: "The message replied."
          schema:
            type: string
        default:
          description: "unexpected error"

  ### Fahrplan Part

  # ToDo: Define properly with Team VTP

  /locations/:
    x-swagger-router-controller: locations
    get:
      description: "The locations service can be used to perform a pattern-based search to retrieve a list of matching locations in the journey planner database. Possible matches might be stations, points of interest and addresses.\n

        The result is a list of matching locations which can be used as origin and destination in trip and departure/arrival board requests."
      operationId: getLocations
      parameters:
        - name: input
          in: query
          description: "Token to search for locations."
          required: true
          type: string
          default: 'Bern'
      responses:
        200:
          description: "A list of locations."
          schema:
            type: array
            items:
              $ref: '#/definitions/location'
        default:
          description: "unexpected error"

  # ToDo: Define properly with Team VTP #wer ist vtp?

  /trips/: #sollte das nicht itinerary sein
    x-swagger-router-controller: trips
    get:
      description:
        'The trips service calculates different trips for a specified origin and destination. The external ids for origin and destination can be retrieved with the locations service.'
      operationId: getTrips
      parameters:
        - name: originId
          in: query
          description: "The id of the origin of the trip."
          required: true
          type: integer
          default: 8507000
        - name: destinationId
          description: "The id of the destination of the trip."
          required: true
          in: query
          type: integer
          default: 8508500
        - name: date
          in: query
          description: "The desired departure date."
          required: true
          type: string
          format: date
          default: '2017-01-14'
        - name: time
          in: query
          description: "The desired departure time."
          type: string
          format: dateTime
          default: '20:22'
      responses:
        200:
          description: "A list of possible trips matching the specified travel wishes."
          schema:
            type: array
            items:
              $ref: '#/definitions/trip'
        default:
          description: "unexpected error"


  ### Vertriebs Part

  /offers/:
    x-swagger-router-controller: offers
    get:
      description: "The offers service calculates offers for a specified origin and destination. The external ids for origin and destination can be retrieved with the locations service."
      operationId: getOffers
      parameters:
        - name: originId
          in: query
          description: "The id of the origin."
          required: true
          type: integer
          default: 8507000
        - name: destinationId
          description: "The id of the destination."
          required: true
          in: query
          type: integer
          default: 8508500
        - name: date
          in: query
          description: "The desired departure date."
          required: true
          type: string
          format: date
          default: '2017-01-14'
        - name: time
          in: query
          description: "The desired departure time."
          type: string
          format: dateTime
          default: '20:22'
      # ToDo; Scale for more than one traveller
        - name: age
          in: query
          description: 'Age of the traveller.'
          type: integer
          default: 42
          minimum: 0
          maximum: 120
        - name: reduction
          in: query
          description: 'Reduction: {None, Half-Fare, GA}'
          type: string
          default: 'halffare'
          enum:
           - none
           - halffare
           - ga
      responses:
        200:
          description: "A list of offers."
          schema:
            type: array
            items:
              $ref: '#/definitions/offer'
        default:
          description: "unexpected error"

  /offers/{tripId}/:
    x-swagger-router-controller: offers
    get:
      description: "The offers service calculates offers for a trip ID. The trip ID can be retrieved using the trips service."
      operationId: getTripOffers
      parameters:
        - name: tripId
          in: path
          description: "The trip ID to get offers for."
          required: true
          type: string
          default: 'trip-rec-context' # for simpler mock testing only
      # ToDo; Scale for more than one traveller
        - name: age
          in: query
          description: 'Age of the traveller.'
          type: integer
          default: 42
          minimum: 0
          maximum: 120
        - name: reduction
          in: query
          description: 'Reduction: {None, Half-Fare, GA}'
          type: string
          default: 'halffare'
          enum:
           - none
           - halffare
           - ga
      responses:
        200:
          description: "A list of offers."
          schema:
            type: array
            items:
              $ref: '#/definitions/offer'
        default:
          description: "unexpected error"

  /booking/{offerId}/prebook/:
    x-swagger-router-controller: prebook
    get:
      description: "Pre-book an offer."
      operationId: getPreBook
      parameters:
        - name: offerId
          in: path
          description: "The offer ID to be pre-booked for later booking."
          required: true
          type: string
          default: 'O1' # for simpler mock testing only
      responses:
        200:
          description: "The pre-booked offer."
          schema:
            $ref: '#/definitions/preBook'
        default:
          description: "unexpected error"

  /booking/{preBookId}/book/:
    x-swagger-router-controller: book
    get:
      description: "Book the pre-booked offer."
      operationId: getBook
      parameters:
        - name: preBookId
          in: path
          description: "The pre-book ID to be booked."
          required: true
          type: string
          default: "P1" # for simpler mock testing only
      responses:
        200:
          description: "The booked offer."
          schema:
            $ref: '#/definitions/book'
        default:
          description: "unexpected error"

  /booking/{bookingId}/cancel/:
    x-swagger-router-controller: cancel
    get:
      description: "Cancel the booking"
      operationId: getCancel
      parameters:
        - name: bookingId
          in: path
          description: "Booking ID to cancel."
          required: true
          type: string
          default: "B1" # for simpler mock testing only
      responses:
        200:
          description: "The canceled booking ID."
          schema:
            type: string
        default:
          description: "unexpected error"

  /booking/{bookingId}/refund/:
    x-swagger-router-controller: cancel
    get:
      description: "Cancel the booking"
      operationId: getRefund
      parameters:
        - name: bookingId
          in: path
          description: "Booking ID to refund."
          required: true
          type: string
          default: "B1" # for simpler mock testing only
      responses:
        200:
          description: "The refunded booking ID."
          schema:
            type: string
        default:
          description: "unexpected error"

  /booking/{bookingId}/tickets/:
    x-swagger-router-controller: tickets
    get:
      description: "Get the booked tickets."
      operationId: getTickets
      parameters:
        - name: bookingId
          in: path
          description: "The booking ID."
          required: true
          type: string
          default: "B1" # for simpler mock testing only
        - name: type
          description: "Type of the tickets: {pdf, screen}"
          in: query
          type: string
          default: 'pdf'
          enum:
            - pdf
            - screen
      responses:
        200:
          description: "The booked tickets."
        default:
          description: "unexpected error"

  /prices/:
    x-swagger-router-controller: prices
    get:
      description: "The price service calculates prices for a specified origin and destination. The external ids for origin and destination can be retrieved with the locations service."
      operationId: getPrices
      parameters:
        - name: originId
          in: query
          description: "The id of the origin."
          required: true
          type: integer
          default: 8507000
        - name: destinationId
          description: "The id of the destination."
          required: true
          in: query
          type: integer
          default: 8508500
        - name: date
          in: query
          description: "The desired departure date."
          required: true
          type: string
          format: date
          default: '2017-01-14'
        - name: time
          in: query
          description: "The desired departure time."
          type: string
          format: dateTime
          default: '20:22'
      # ToDo; Scale for more than one traveller
        - name: age
          in: query
          description: 'Age of the traveller.'
          type: integer
          default: 42
          minimum: 0
          maximum: 120
        - name: reduction
          in: query
          description: 'Reduction: {None, Half-Fare, GA}'
          type: string
          default: 'halffare'
          enum:
           - none
           - halffare
           - ga
      responses:
        200:
          description: "A list of prices for the trip."
          schema:
            type: array
            items:
              $ref: '#/definitions/price'
        default:
          description: "unexpected error"

  /prices/{tripId}/:
    x-swagger-router-controller: prices
    get:
      description: "The price service calculates prices for a trip ID. The trip ID can be retrieved using the trips service."
      operationId: getTripPrices
      parameters:
        - name: tripId
          in: path
          description: "The trip ID to get prices for."
          required: true
          type: string
          default: 'trip-rec-context' # for simpler mock testing only
      # ToDo; Scale for more than one traveller
        - name: age
          in: query
          description: 'Age of the traveller.'
          type: integer
          default: 42
          minimum: 0
          maximum: 120
        - name: reduction
          in: query
          description: 'Reduction: {None, Half-Fare, GA}'
          type: string
          default: 'halffare'
          enum:
           - none
           - halffare
           - ga
      responses:
        200:
          description: "A list of prices for the trip"
          schema:
            type: array
            items:
              $ref: '#/definitions/price'
        default:
          description: "unexpected error"
          
## Definitions

definitions:
  location:
    type: object
    required:
      - id
      - name
      - lon
      - lat
      - type
    properties:
      id:
        description: 'UIC code of the location.'
        type: string
        default: '8507785'
      name:
        description: 'Name of the location.'
        type: string
        default: 'Bern Hauptbahnhof'
      lon:
        description: 'Longitude of centre coordinate.'
        type: number
        format: double
        default: 7.439122
      lat:
        description: 'Latitude of centre coordinate.'
        type: number
        format: double
        default: 46.948825
      type:
        description: 'Type of the location.'
        type: string
        default: 'STATION'

  # ToDo: Refine properly with Team VTP
  trip:
    type: object
    required:
      - tripId
    properties:
      tripId:
        description: "Id of a trip"
        type: string
      trips:
        type: array
        items:
          $ref: '#/definitions/leg'
      links:
        type: array
        items:
          $ref: '#/definitions/link'

  leg:
    type: object
    required:
      - origin
      - destination
    properties:
      origin:
        description: "The origin of the trip."
        type: object
        #schema:
        #  $ref: '#/definitions/stop'
      destination:
        description: "The destination of the trip."
        type: object
        #schema:
        #  $ref: '#/definitions/stop'

  stop:
    type: object
    required:
      - name
      - date
      - time
    properties:
      name:
        description: 'The name of the stop.'
        type: string
        default: 'Bern'
      date:
        description: 'The date of the departure/arrival.'
        type: string
        format: date
        default: '2017-01-14'
      time:
        description: 'The time of the departure/arrival.'
        type: string
        format: dateTime
        default: '20:14'

  price:
    type: object
    required:
      - price
    properties:
      description:
        description: 'A description of the priced element.'
        type: string
        default: 'Normal fare ticket'
      price:
        description: "Price of the trip"
        type: integer
        default: 22
        
  offer:
    type: object
    required:
      - offerId
      - description
      - price
    properties:
      offerId:
        description: "ID of the offer for pre-booking."
        type: string
        default: 'O1'
      description:
        description: "Description of the offer."
        type: string
      price:
        description: "Price of the offer."
        type: integer
        default: 22
      links:
        type: array
        items:
          $ref: '#/definitions/link'

  preBook:
    type: object
    required:
     - preBookingId
    properties:
      preBookingId:
        description: "ID of the pre-booked offer."
        type: string
        default: 'P1'
      description:
        description: "Description of the pre-booked offer."
        type: string
      links:
        type: array
        items:
          $ref: '#/definitions/link'
          
  book:
    type: object
    required:
     - bookingId
    properties:
      bookingId:
        description: "Id of the booking"
        type: string
        default: 'B1'
      description:
        description: "Description of the booked offer."
        type: string
      links:
        type: array
        items:
          $ref: '#/definitions/link'


  ### REST level 3 support

  link:
    type: object
    required:
     - rel
     - href
    properties:
      rel:
        type: string
        description: "Aktion"
      href:
        type: string
        description: "URL zu Auslösung der Aktion"
